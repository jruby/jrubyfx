#!/usr/bin/env jruby
=begin
JRubyFX - Write JavaFX and FXML in Ruby
Copyright (C) 2012 Patrick Plenefisch

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as 
published by the Free Software Foundation, either version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
=end

require 'date'
require 'jrubyfx/utils'

if ARGV.length < 1
  puts "Please specify the fxml file to parse"
  puts "#{$0} some.fxml [output.rb [AppName]]"
  exit -1
end

fxml = ARGV[0]
rb = File.basename(fxml.gsub(/\.fxml$/i, ".rb"))
rb = ARGV[1] if ARGV.length > 1
name_guess = "My" + File.basename(fxml).gsub(/\.fxml$/i, "").gsub(/[^a-zA-Z0-9_]/i, "") # better guess would be better
name_guess = ARGV[2] if ARGV.length > 2

print "Generating RubyFX template for #{fxml} into #{rb}... "

File.open(rb, "w") do |output|
  
  output << <<END
# This file was auto-generated by rubyfx-generator at #{DateTime.now.to_s}

require 'jrubyfx'

class #{name_guess}Application < JRubyFX::Application
  def start(stage)
    with(stage, title: "#{name_guess}", width: 600, height: 400)
    #{name_guess}Controller.load_fxml("#{File.basename(fxml)}", stage)
    stage.show()
  end
end

class #{name_guess}Controller < JRubyFX::Controller
END

  File.open(fxml, "r") do |fx|
    handlers = "\n"
    fx.each_line do |line|
      line.scan(/fx:id="([^ "':]+)"/) do |match| 
        output << "  fx_id :#{match[0]}\n"
      end
      # TODO: may not work with funky non-latin characters
      # Yes, I used regex, yes its xml, yes I now have two problems.
      line.scan(/on((([A-Z]*[a-z]*)*?)[A-Z]+[a-z]+)="#([^ "':]+)"/) do |match| 
        handlers << "  fx_#{match[1].snake_case}#{(match[1].length >0 ? "_" : "")}handler :#{match[3]} do |event|\n    # TODO: Auto-generated event handler\n"
        handlers << "    puts \"#{match[0]} event '#{match[3]}' called\"\n  end\n\n"
      end
    end
    output << handlers
  end
  
  output << <<END
end

#{name_guess}Application.launch
END

end

puts "Done!"
puts "Launching 'ruby #{rb}' ..."

require rb
