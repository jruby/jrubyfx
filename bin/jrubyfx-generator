#!/usr/bin/env jruby
=begin
JRubyFX - Write JavaFX and FXML in Ruby
Copyright (C) 2013 The JRubyFX Team

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
=end

require 'date'
require 'jrubyfx/utils'
require "java"

if ARGV.length < 1
  puts "Please specify the fxml file to parse"
  puts "#{$0} some.fxml [output.rb [AppName]]"
  exit -1
end

fxml = ARGV[0]
rb = File.basename(fxml.gsub(/\.fxml$/i, ".rb"))
rb = ARGV[1] if ARGV.length > 1
name_guess = "My" + File.basename(fxml).gsub(/\.fxml$/i, "").gsub(/[^a-zA-Z0-9_]/i, "") # better guess would be better
name_guess = ARGV[2] if ARGV.length > 2

print "Generating JRubyFX template for #{fxml} into #{rb}... "

File.open(rb, "w") do |output|

  output << <<END
# This file was auto-generated by jrubyfx-generator at #{DateTime.now.to_s}

require 'jrubyfx'

class #{name_guess}Application < JRubyFX::Application
  def start(stage)
    with(stage, title: "#{name_guess}", width: 600, height: 400)
    #{name_guess}Controller.new("#{File.basename(fxml)}", stage)
    stage.show()
  end
end

class #{name_guess}Controller < JRubyFX::Controller
END

  fx_ids = [nil]
  File.open(fxml, "r") do |fx|
    handlers = "\n"

    fx.each_line do |line|
      line.scan(/fx:id="([^ "':]+)"/) do |match|
        fx_ids << match[0]
      end
      # TODO: may not work with funky non-latin characters
      # Yes, I used regex, yes its xml, yes I now have two problems.
      line.scan(/on((([A-Z]*[a-z]*)*?)[A-Z]+[a-z]+)="#([^ "':]+)"/) do |match|
        handlers <<
          if match[2]
           "  on_#{match[1].snake_case} :#{match[3]} do |event|\n"
          else
            "  on :#{match[3]} do |event|\n"
          end
        handlers << "    # TODO: Auto-generated event handler\n"
        handlers << "    puts \"#{match[0]} event '#{match[3]}' called\"\n  end\n\n"
      end
    end
    output << "\n  # nodes with ruby method-like fx:ids may be accessed directly"
    output << "\n  def initialize#{fx_ids.join "\n    # "}\n  end\n"
    output << handlers
  end

  output << <<END
end

#{name_guess}Application.launch
END

end

puts "Done!"

os_name = java.lang.System.getProperty('os.name')
unless os_name =~ /win/i
  puts "Launching 'jruby #{rb}' ..."

  require rb
end